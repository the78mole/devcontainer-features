name: "Release"
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-tag: ${{ steps.version.outputs.version_tag }}
      changed: ${{ steps.version.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "/(\\+semver:\\s?(breaking|major)|!:)/"
          # A string which indicates the flags used by the `major_pattern` regular expression. Optional; defaults to 'gm'.
          major_regexp_flags: "gm"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "/(\\+semver:\\s?(feature|minor)|^feat|^fix|^perf|^refactor)/"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Optional; defaults to 'gm'.
          minor_regexp_flags: "gmi"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src/"
          # Named version, will be used as suffix for name version tag
          namespace: ""
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true

  pre-release-checks:
    runs-on: ubuntu-latest
    needs: version
    if: ${{ needs.version.outputs.changed == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.x"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

      - name: Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test all features"
        run: |
          features=$(./.github/scripts/get-features.sh)
          echo "Testing features: $features"
          devcontainer features test --skip-scenarios . -i ubuntu:latest

  create-release:
    runs-on: ubuntu-latest
    needs: [version, pre-release-checks]
    if: ${{ needs.version.outputs.changed == 'true' }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get features list
        id: features
        run: |
          features=$(./.github/scripts/get-features.sh)
          echo "features=$features" >> $GITHUB_OUTPUT
          # Create formatted feature list for release notes
          feature_list=""
          for feature in $(echo $features | jq -r '.[]'); do
            feature_list="${feature_list}- **${feature}**: $(jq -r '.description' src/${feature}/devcontainer-feature.json)"$'\n'
          done
          echo "formatted_list<<EOF" >> $GITHUB_OUTPUT
          echo "$feature_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create tag
        if: ${{ !env.ACT }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ needs.version.outputs.version-tag }}
          git push origin ${{ needs.version.outputs.version-tag }}

      - name: Create Release
        if: ${{ !env.ACT }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.version.outputs.version-tag }}
          name: Release ${{ needs.version.outputs.version-tag }}
          body: |
            ## Changes in ${{ needs.version.outputs.version-tag }}

            ### Features
            This release includes the following devcontainer features:

            ${{ steps.features.outputs.formatted_list }}

            ### Usage
            Add this to your `devcontainer.json`:
            ```json
            {
              "features": {
                "ghcr.io/the78mole/devcontainer-features/postgresql:${{ needs.version.outputs.version }}": {}
              }
            }
            ```

            ### What's Changed
            - PostgreSQL feature with support for versions 11-17
            - Automatic binary symlinks for easy access
            - Support for Ubuntu 22.04+ and Debian 11+ base images
            - Comprehensive testing across multiple PostgreSQL versions
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [version, create-release]
    if: ${{ needs.version.outputs.changed == 'true' }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.version.outputs.version-tag }}

      - name: "Publish Features"
        if: ${{ !env.ACT }}
        uses: devcontainers/action@v1
        with:
          publish-features: "true"
          base-path-to-features: "./src"
          generate-docs: "true"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
