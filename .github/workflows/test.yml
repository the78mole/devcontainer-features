name: "CI"
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  detect-features:
    runs-on: ubuntu-latest
    outputs:
      features: ${{ steps.get-features.outputs.features }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get features
        id: get-features
        run: |
          features=$(./.github/scripts/get-features.sh)
          echo "features=$(echo $features | tr -d '\n')" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: [pre-commit, detect-features]
    strategy:
      matrix:
        features: ${{ fromJson(needs.detect-features.outputs.features || '["postgresql"]') }}
        baseImage:
          - debian:latest
          - ubuntu:latest
          - mcr.microsoft.com/devcontainers/base:ubuntu
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'"
        run: devcontainer features test --skip-scenarios -f ${{ matrix.features }} -i ${{ matrix.baseImage }} .

  test-scenarios:
    runs-on: ubuntu-latest
    needs: [pre-commit, detect-features]
    strategy:
      matrix:
        features: ${{ fromJson(needs.detect-features.outputs.features || '["postgresql"]') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing '${{ matrix.features }}' scenarios"
        run: devcontainer features test -f ${{ matrix.features }} --skip-autogenerated .

  test-global:
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing global scenarios"
        run: devcontainer features test --global-scenarios-only .

  test-postgresql-versions:
    runs-on: ubuntu-latest
    needs: pre-commit
    strategy:
      matrix:
        version: [11, 12, 13, 14, 15, 16, 17, latest]
        baseImage:
          - ubuntu:latest
          - debian:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test PostgreSQL version ${{ matrix.version }} on ${{ matrix.baseImage }}"
        run: |
          mkdir -p .tmp-test/.devcontainer
          cp -r src .tmp-test/.devcontainer/
          echo '{
            "image": "${{ matrix.baseImage }}",
            "features": {
              "./src/postgresql": {
                "version": "${{ matrix.version }}"
              }
            }
          }' > .tmp-test/.devcontainer/devcontainer.json
          cd .tmp-test
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . psql --version
          devcontainer exec --workspace-folder . which postgres
          devcontainer exec --workspace-folder . bash -c "ls -la /usr/local/bin/psql"
          cd ..
          rm -rf .tmp-test

  test-uv-versions:
    runs-on: ubuntu-latest
    needs: pre-commit
    strategy:
      matrix:
        version: [latest, 0.6.17, 0.7.22, 0.8.12, 0.8.13, 0.8.14]
        baseImage:
          - mcr.microsoft.com/devcontainers/python:3.11
          - mcr.microsoft.com/devcontainers/python:3.12
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test uv version ${{ matrix.version }} on ${{ matrix.baseImage }}"
        run: |
          mkdir -p .tmp-test/.devcontainer
          cp -r src .tmp-test/.devcontainer/
          echo '{
            "image": "${{ matrix.baseImage }}",
            "features": {
              "./src/uv": {
                "version": "${{ matrix.version }}"
              }
            }
          }' > .tmp-test/.devcontainer/devcontainer.json
          cd .tmp-test
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . uv --version
          devcontainer exec --workspace-folder . which uv
          devcontainer exec --workspace-folder . bash -c "ls -la /usr/local/bin/uv"
          cd ..
          rm -rf .tmp-test

  test-uv-base-images:
    runs-on: ubuntu-latest
    needs: pre-commit
    strategy:
      matrix:
        baseImage:
          - ubuntu:latest
          - debian:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test uv on ${{ matrix.baseImage }}"
        run: |
          mkdir -p .tmp-test/.devcontainer
          cp -r src .tmp-test/.devcontainer/
          echo '{
            "image": "${{ matrix.baseImage }}",
            "features": {
              "./src/uv": {
                "version": "latest"
              }
            }
          }' > .tmp-test/.devcontainer/devcontainer.json
          cd .tmp-test
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . uv --version
          devcontainer exec --workspace-folder . which uv
          devcontainer exec --workspace-folder . bash -c "ls -la /usr/local/bin/uv"
          devcontainer exec --workspace-folder . bash -c "python3 --version || echo 'Python3 not available'"
          devcontainer exec --workspace-folder . bash -c "uv pip --help"
          cd ..
          rm -rf .tmp-test
