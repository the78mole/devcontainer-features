name: "CI"
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  detect-features:
    runs-on: ubuntu-latest
    outputs:
      features: ${{ steps.get-features.outputs.features }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get features
        id: get-features
        run: |
          features=$(./.github/scripts/get-features.sh)
          echo "features=$(echo $features | tr -d '\n')" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: [pre-commit, detect-features]
    continue-on-error: true
    strategy:
      matrix:
        features: ${{ fromJson(needs.detect-features.outputs.features || '["postgresql"]') }}
        baseImage:
          - debian:latest
          - ubuntu:latest
          - mcr.microsoft.com/devcontainers/base:ubuntu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'"
        run: devcontainer features test --skip-scenarios -f ${{ matrix.features }} -i ${{ matrix.baseImage }} .

  test-scenarios:
    runs-on: ubuntu-latest
    needs: [pre-commit, detect-features]
    continue-on-error: true
    strategy:
      matrix:
        features: ${{ fromJson(needs.detect-features.outputs.features || '["postgresql"]') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing '${{ matrix.features }}' scenarios"
        run: devcontainer features test -f ${{ matrix.features }} --skip-autogenerated .

  test-global:
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing global scenarios"
        run: devcontainer features test --global-scenarios-only .

  test-versions:
    runs-on: ubuntu-latest
    needs: pre-commit
    continue-on-error: true
    strategy:
      matrix:
        version: [11, 12, 13, 14, 15, 16, 17, latest]
        baseImage:
          - ubuntu:latest
          - debian:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test PostgreSQL version ${{ matrix.version }} on ${{ matrix.baseImage }}"
        run: |
          echo '{"image": "${{ matrix.baseImage }}", "features": {"./src/postgresql": {"version": "${{ matrix.version }}"}}}' > test-version.json
          devcontainer up --workspace-folder . --config test-version.json
          devcontainer exec --workspace-folder . --config test-version.json psql --version
          devcontainer exec --workspace-folder . --config test-version.json which postgres
