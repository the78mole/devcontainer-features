name: "Version and Tag"
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "/(\\+semver:\\s?(breaking|major)|!:)/"
          # A string which indicates the flags used by the `major_pattern` regular expression. Optional; defaults to 'gm'.
          major_regexp_flags: "gm"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "/(\\+semver:\\s?(feature|minor)|^feat|^fix|^perf|^refactor)/"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Optional; defaults to 'gm'.
          minor_regexp_flags: "gmi"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src/"
          # Named version, will be used as suffix for name version tag
          namespace: ""
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true

      - name: Create tag
        if: ${{ steps.version.outputs.changed == 'true' && !env.ACT }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.version.outputs.version_tag }}
          git push origin ${{ steps.version.outputs.version_tag }}

      - name: Create Release
        if: ${{ steps.version.outputs.changed == 'true' && !env.ACT }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version_tag }}
          name: Release ${{ steps.version.outputs.version_tag }}
          body: |
            ## Changes in ${{ steps.version.outputs.version_tag }}

            ### Features
            This release includes the following devcontainer features:

            ```bash
            # Get available features
            features=$(./.github/scripts/get-features.sh)
            echo "Available features: $features"
            ```

            ### Usage
            Add this to your `devcontainer.json`:
            ```json
            {
              "features": {
                "ghcr.io/the78mole/devcontainer-features/postgresql:${{ steps.version.outputs.version }}": {}
              }
            }
            ```
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
